#! /usr/bin/env python

import sys
import signal
import argparse
import threading

from config import DefaultConfig
from server import DNSServer


def parse_args():
    default = DefaultConfig()

    p = argparse.ArgumentParser(description="Intercept and spoof DNS requests")
    p.add_argument('records', metavar='N', nargs='+',
            help='records to spoof')
    p.add_argument('-d', '--dnsserver',
            dest='dns_server', default=default.dns_server,
            help='default DNS server. default: {}'.format(default.dns_server))
    p.add_argument('-P', '--dnsport',
            dest='dns_port', default=default.dns_port, type=int,
            help='default DNS port. default: {}'.format(default.dns_port))
    p.add_argument('-b', '--bindaddr',
            dest='bind_addr', default=default.bind_addr,
            help='address to bind to. default: {}'.format(default.bind_addr))
    p.add_argument('-p', '--port',
            dest='bind_port', default=default.bind_port, type=int,
            help='port to bind to. default: {}'.format(default.bind_port))
    p.add_argument('-t', '--ttl',
            dest='ttl', default=default.ttl, type=int,
            help='TTL for response. default: {}s'.format(default.ttl))
    p.add_argument('-q', '--quiet', dest='quiet', action='store_true',
            help='suppress output')
    p.add_argument('-6', '--ipv6', action='store_true',
            help='use IPv6 server socket')
    p.add_argument('-r', '--rules', dest='rules_file',
            help='file to read rules from')

    return p.parse_args()

def setup_signal_handlers():
    signal.signal(signal.SIGINT, handle_sigint)

def handle_sigint(signal, frame):
    print ('[-] Exiting...')
    sys.exit(0)

def main():
    args = parse_args()

    setup_signal_handlers()

    try:
        server = DNSServer((args.bind_addr, args.bind_port), args.ipv6)
    except OSError as e:
        sys.exit('[!] could not start server -- {0}'.format(e))

    server_thread = threading.Thread(target=server.serve_forever)

    server_thread.daemon = True
    server_thread.start()

    server_thread.join()

if __name__ == '__main__':
    main()
